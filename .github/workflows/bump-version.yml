name: Bump Version
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    types: [closed]
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Type of version to bump (major, minor, patch, build, release)'
        required: true
        default: 'patch'
      preRelease:
        description: 'Mark as a pre-release version? (true/false)'
        required: false
        default: 'false'

jobs:
  versioning:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)) && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')
    permissions:
      contents: write
      packages: write
    env:
      GIT_USER_NAME: GitHub Action
      GIT_USER_EMAIL: action@github.com
      SKIP: 'false'
      NEW_VERSION: ''
      hash: ''
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Check if last commit was made by GitHub Actions
        id: check_user
        run: |
          if git log -1 --pretty=format:'%ae' | grep -q "${{ env.GIT_USER_EMAIL }}"; then
            echo "Last commit was made by GitHub Actions. Skipping workflow."
            echo "SKIP=true" >> $GITHUB_ENV
          else
            echo "Last commit was not made by GitHub Actions. Running workflow."
            echo "SKIP=false" >> $GITHUB_ENV
          fi

      - name: Check for skip keyword
        id: check-skip
        run: |
          SKIP="${{ env.SKIP }}"
          
          # For PR merges, only check the PR title
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.event.action }}" == "closed" ]] && [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # Don't check commit messages for PRs, only the PR title
            PR_TITLE="${{ github.event.pull_request.title }}"
            if [[ "$PR_TITLE" == *"[skip-version]"* ]]; then
              SKIP=true
            fi
          
          # For direct pushes to branches, check the commit message
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\n')
            if [[ "$COMMIT_MESSAGE" == *"[skip-version]"* ]]; then
              SKIP=true
            fi
          fi
          
          echo "SKIP=$SKIP" >> $GITHUB_ENV

      - name: Set up Python
        if: env.SKIP == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        if: env.SKIP == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Configure Git
        if: env.SKIP == 'false'
        run: |
          git config --global user.email "${{ env.GIT_USER_EMAIL }}"
          git config --global user.name "${{ env.GIT_USER_NAME }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git

      - name: Get current commit hash
        if: env.SKIP == 'false'
        id: get_commit
        run: printf 'hash=%s\n' "$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Handle PR merge to main
        if: env.SKIP == 'false' && github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main'
        run: |
          # Get the PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Get the version from the PR branch
          PR_VERSION=$(cat VERSION)
          
          # If version is in canary format, convert to prod
          if [[ "$PR_VERSION" == *"+canary"* ]]; then
            bump2version release --new-version prod --verbose --allow-dirty
          fi
          
          # Handle version bumping based on PR title
          if [[ "$PR_TITLE" == *"[major]"* ]]; then
            bump2version major --verbose --allow-dirty
          elif [[ "$PR_TITLE" == *"[minor]"* ]]; then
            bump2version minor --verbose --allow-dirty
          else
            # Default behavior: bump patch version
            bump2version patch --verbose --allow-dirty
          fi
          
          # Store the new version
          printf 'NEW_VERSION=%s\n' "$(cat VERSION)" >> $GITHUB_ENV

      - name: Handle PR merge to dev
        if: env.SKIP == 'false' && github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'dev'
        run: |
          # If merging from main to dev, convert to canary
          if [[ "${{ github.head_ref }}" == "main" ]]; then
            bump2version release --new-version canary --verbose --allow-dirty
            printf 'NEW_VERSION=%s\n' "$(cat VERSION)" >> $GITHUB_ENV
          fi

      - name: Bump version for dev push
        if: env.SKIP == 'false' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: |
          # Only bump build number if already in canary format
          if [[ "$(cat VERSION)" == *"+canary"* ]]; then
            bump2version build --verbose --allow-dirty
            printf 'NEW_VERSION=%s\n' "$(cat VERSION)" >> $GITHUB_ENV
          fi

      - name: Commit and push changes if new version
        if: env.SKIP == 'false' && env.NEW_VERSION
        run: |
          if [ "$(git rev-parse HEAD)" != "${{ env.hash }}" ]; then
            git push origin HEAD:${{ github.ref }}
            git push origin --tags
          else
            echo "No new commit created, so no push."
          fi

      - name: Create Release
        if: env.SKIP == 'false' && env.NEW_VERSION
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/dev' }}

  manual-versioning:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      packages: write
    env:
      GIT_USER_NAME: GitHub Action
      GIT_USER_EMAIL: action@github.com
      NEW_VERSION: ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Configure Git
        run: |
          git config --global user.email "${{ env.GIT_USER_EMAIL }}"
          git config --global user.name "${{ env.GIT_USER_NAME }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git

      - name: Get current commit hash
        id: get_commit
        run: printf 'hash=%s\n' "$(git rev-parse HEAD)" >> $GITHUB_ENV
      
      - name: Bump version manually
        run: |
          bump2version ${{ github.event.inputs.versionType }} --verbose --allow-dirty
          printf 'NEW_VERSION=%s\n' "$(cat VERSION)" >> $GITHUB_ENV
  
      - name: Commit and push changes if new version
        if: env.NEW_VERSION
        run: |
          if [ "$(git rev-parse HEAD)" != "${{ env.hash }}" ]; then
            git push origin HEAD:${{ github.ref }}
            git push origin --tags
          else
            echo "No new commit created, so no push."
          fi

      - name: Create Release
        if: env.NEW_VERSION
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ github.event.inputs.preRelease }}